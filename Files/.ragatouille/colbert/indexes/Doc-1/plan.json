{
    "config": {
        "query_token_id": "[unused0]",
        "doc_token_id": "[unused1]",
        "query_token": "[Q]",
        "doc_token": "[D]",
        "ncells": null,
        "centroid_score_threshold": null,
        "ndocs": null,
        "load_index_with_mmap": false,
        "index_path": null,
        "index_bsize": 32,
        "nbits": 4,
        "kmeans_niters": 20,
        "resume": false,
        "similarity": "cosine",
        "bsize": 64,
        "accumsteps": 1,
        "lr": 1e-5,
        "maxsteps": 400000,
        "save_every": null,
        "warmup": 20000,
        "warmup_bert": null,
        "relu": false,
        "nway": 64,
        "use_ib_negatives": true,
        "reranker": false,
        "distillation_alpha": 1.0,
        "ignore_scores": false,
        "model_name": null,
        "query_maxlen": 32,
        "attend_to_mask_tokens": false,
        "interaction": "colbert",
        "dim": 128,
        "doc_maxlen": 180,
        "mask_punctuation": true,
        "checkpoint": "colbert-ir\/colbertv2.0",
        "triples": "\/future\/u\/okhattab\/root\/unit\/experiments\/2021.10\/downstream.distillation.round2.2_score\/round2.nway6.cosine.ib\/examples.64.json",
        "collection": [
            "Document retrieval is defined as the matching of some stated user query against a set of free-text records. These records could be any type of mainly unstructured text, such as newspaper articles, real estate records or paragraphs in a manual. User queries can range from multi-sentence full descriptions of an information need to a few words.\nDocument retrieval is sometimes referred to as, or as a branch of, text retrieval. Text retrieval is a branch of information retrieval where the information is stored primarily in the form of text. Text databases became decentralized thanks to the personal computer. Text retrieval is a critical area of study today, since it is the fundamental basis of all internet search engines.",
            "== Description ==\nDocument retrieval systems find information to given criteria by matching text records (documents) against user queries, as opposed to expert systems that answer questions by inferring over a logical knowledge database. A document retrieval system consists of a database of documents, a classification algorithm to build a full text index, and a user interface to access the database.\nA document retrieval system has two main tasks:\n\nFind relevant documents to user queries\nEvaluate the matching results and sort them according to relevance, using algorithms such as PageRank.\nInternet search engines are classical applications of document retrieval. The vast majority of retrieval systems currently in use range from simple Boolean systems through to systems using statistical or natural language processing techniques.",
            "== Variations ==\nThere are two main classes of indexing schemata for document retrieval systems: form based (or word based), and content based indexing. The document classification scheme (or indexing algorithm) in use determines the nature of the document retrieval system.\n\n\n=== Form based ===\nForm based document retrieval addresses the exact syntactic properties of a text, comparable to substring matching in string searches. The text is generally unstructured and not necessarily in a natural language, the system could for example be used to process large sets of chemical representations in molecular biology. A suffix tree algorithm is an example for form based indexing.",
            "=== Content based ===\nThe content based approach exploits semantic connections between documents and parts thereof, and semantic connections between queries and documents. Most content based document retrieval systems use an inverted index algorithm.\nA signature file is a technique that creates a quick and dirty filter, for example a Bloom filter, that will keep all the documents that match to the query and hopefully a few ones that do not. The way this is done is by creating for each file a signature, typically a hash coded version. One method is superimposed coding. A post-processing step is done to discard the false alarms. Since in most cases this structure is inferior to inverted files in terms of speed, size and functionality, it is not used widely. However, with proper parameters it can beat the inverted files in certain environments.",
            "== Example: PubMed ==\nThe PubMed form interface features the \"related articles\" search which works through a comparison of words from the documents' title, abstract, and MeSH terms using a word-weighted algorithm.\n\n\n== See also ==\nCompound term processing\nDocument classification\nEnterprise search\nEvaluation measures (information retrieval)\nFull text search\nInformation retrieval\nLatent semantic indexing\nSearch engine\n\n\n== References ==\n\n\n== Further reading ==\nFaloutsos, Christos; Christodoulakis, Stavros (1984). \"Signature files: An access method for documents and its analytical performance evaluation\". ACM Transactions on Information Systems. 2 (4): 267\u2013288. doi:10.1145\/2275.357411. S2CID 8120705.",
            "ACM Transactions on Information Systems. 2 (4): 267\u2013288. doi:10.1145\/2275.357411. S2CID 8120705.\nJustin Zobel; Alistair Moffat; Kotagiri Ramamohanarao (1998). \"Inverted files versus signature files for text indexing\" (PDF). ACM Transactions on Database Systems. 23 (4): 453\u2013490. CiteSeerX 10.1.1.54.8753. doi:10.1145\/296854.277632. S2CID 7293918.\nBen Carterette; Fazli Can (2005). \"Comparing inverted files and signature files for searching a large lexicon\" (PDF). Information Processing and Management.",
            "Ben Carterette; Fazli Can (2005). \"Comparing inverted files and signature files for searching a large lexicon\" (PDF). Information Processing and Management. 41 (3): 613\u2013633. doi:10.1016\/j.ipm.2003.12.003.\n\n\n== External links ==\n\nFormal Foundation of Information Retrieval, Buckinghamshire Chilterns University College"
        ],
        "queries": "\/future\/u\/okhattab\/data\/MSMARCO\/queries.train.tsv",
        "index_name": "Doc-1",
        "overwrite": false,
        "root": ".ragatouille\/",
        "experiment": "colbert",
        "index_root": null,
        "name": "2025-02\/06\/11.52.46",
        "rank": 0,
        "nranks": 1,
        "amp": true,
        "gpus": 0,
        "avoid_fork_if_possible": false
    },
    "num_chunks": 1,
    "num_partitions": 256,
    "num_embeddings_est": 815.0000152587891,
    "avg_doclen_est": 116.42857360839844
}
